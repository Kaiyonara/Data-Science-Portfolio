db.createCollection("appusers");
//Creates the document.

db.appusers.insertOne({_id:1,lastName:"Pumpernickel", firstName:"Georgina", middleName:"Sasquatch", age:27, gender:"f"})
//Inserts a document with id #1.

db.appusers.insertOne({_id:2,lastName:"Wilson", firstName:"Coderboy", age:18, favoriteColor:"blue"})
//Inserts a document with id #2.

db.appusers.find({})
//This lets us see all documents in the database.

db.appusers.insertMany([{lastName: "Anstruther", firstName: "Jimmy", age: 21},
 {lastName: "Stevens", firstName: "Amelia", age: 28},
 {lastName: "Hopkins", firstName: "Fred", age: 35, favoriteColor: "Green"}])

 db.appusers.find({})

 db.movies.insertMany([{title: "The Shawshank Redemption", director: "Frank Darabont", yearReleased: 1994},
  {title: "The Dark Knight", director: "Christopher Nolan", yearReleased: 2008}, 
  {title: "It's a Wonderful Life", director: "Frank Capra", yearReleased: 1946}])

  // Create three more users of your choosing, using the insertOne() query, and add them to the appusers collection.
// Include at least the firstName, lastName, and age fields. Feel free to also include any other fields you think would be useful data for an app user.

db.appusers.insertOne({_id:3,lastName:"Bartlette", firstName:"Kai", middleName:"Afi", age:42, gender:"f", password: "12345", localtime: "1540"})
//Inserts a document for a user with id #3.

db.appusers.insertOne({_id:4,lastName:"Wilkins", firstName:"Marie", middleName:"Tsudae", age:19, gender:"f", password: "12345", localtime: "1239"})
db.appusers.insertOne({_id:5,lastName:"Johnson", firstName:"Brandon", middleName:"Meredith", age:51, gender:"m", password: "12345", localtime: "1541"})

db.appusers.find({})

// Create a new collection within your database through Atlas.
// This new collection should be named cars.
// Insert five cars into this collection using the insertMany() query.
// Include the following fields: make, model, color, year, fourDoor, and fourWheelDrive.
// The last two fields, fourDoor and fourWheelDrive, should be of type Boolean (i.e. true or false).
// Once that is done, run a find() query to see your newly created documents.
// Lastly, return to Atlas and view your collection and documents there.

db.cars.insertMany([{make: "Kia", model: "Sportage", color: "Silver", year: "2022", fourDoor: "true", fourWheelDrive: "false"},
{make: "Chevrolet", model: "Impala", color: "Black", year: "2021", fourDoor: "true", fourWheelDrive: "false"},
{make: "Ford", model: "Focus", color: "Red", year: "2005", fourDoor: "true", fourWheelDrive: "false"},
{make: "Honda", model: "Civic", color: "Blue", year: "2007", fourDoor: "true", fourWheelDrive: "false"},
{make: "Nissan", model: "Maxima", color: "White", year: "1996", fourDoor: "true", fourWheelDrive: "false"}
])

db.cars.find({})

//--------------------

db.appusers.find({ _id : { $eq : 1} })
//Find me a document in the appusers collection that has a user id of 1.

db.appusers.find({ _id : { $ne : 1} })
//Find me a document in the appusers collection that has a user id  that is not 1.

db.appusers.find({ _id : { $gt : 1} })
//Find me a document in the appusers collection that has a user id greater than 1.

db.appusers.find({ _id : { $gte : 2} })
//Find me a document in the appusers collection that has a user id that is greater than or equal to 2.

db.appusers.find({ _id : { $lt : 2} })
//Find me a document in the appsusers collection that has a user id that is less than 2.

db.appusers.find({ _id : { $lte : 2} })
//Find me a document in that appusers collection that has a user id that is less than or equal to 2.


db.inventory.insertMany([
{ item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A", price: 16.49, sale: true },
{ item: "spiral notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "A", price: 4.79, sale: false },
{ item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D", price: 6.99, sale: true },
{ item: "day planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D", price: 25.29, sale: true },
{ item: "calendar", size: { h: 21.75, w: 17, uom: "in" }, status: "B", price: 5.99, sale: false },
{ item: "scissor", qty: 15, size: { h: 8, w: 4.25, uom: "in" }, status: "B", price: 11.59, sale: true },
{ item: "tape dispenser", qty: 5, size: { h: 3, w: 7, uom: "in" }, status: "A", price: 3.09, sale: true }
]);

db.inventory.find( { qty: { $in: [ 5, 15 ] } } )
//Find me a document in the inventory collection that has a qty field with a value of either 5 or 15.

db.inventory.find( { qty: { $nin: [ 5, 15 ] } } )
//Find me a a document in the inventory collection has a qty field with a value not equal to 5 or 15.

db.inventory.find( { $and: [ { price: { $ne: 6.99 } }, { price: { $exists: true } } ] } )
//Find me a document in the inventory collection that has a price, AND with a price that is not equal to 6.99.

db.inventory.find( { $or: [ { qty: { $lt: 20 } }, { price: 16.49 } ] } )
//The above query will locate all documents in the inventory collection where the qty field value is less than 20, or the price field value equals 16.49.

db.inventory.find( {
$and : [
{ $or : [ { price : { $eq : 4.79 } }, { price : { $eq : 3.09 } } ] },
{ $or : [ { sale : true }, { qty : { $lt : 20 } } ] }
]
} )
//The query above will return those records with
//price equal to either 4.79 OR 3.09
//AND
//sale is true OR the qty is less than 20.

db.inventory.find( { price: { $not: { $gt: 4.80 } } } )
//The above query will locate all documents in the inventory collection with 
//a price field and where the price is not greater than 4.80. 
//So, any item with a price that is 4.80 or less will be returned.

db.inventory.find( { $nor: [ { price: { $gte : 5.99 } }, { sale: { $eq : true } } ] } )
//The above query will return all documents that:
//contain the price field whose value is not greater than or equal to 5.99 and contain the sale field whose value is NOT equal to true
//OR
//contains the price field whose value is not greater than or equal to 5.99 but do not contain the sale field
//OR
//do not contain the price field but contains the sale field with a value that is not equal to true
//OR
//do not contain the price field and do not contain the sale field.

db.inventory.find( { qty: { $exists: true, $nin: [ 5, 15 ] } } )
